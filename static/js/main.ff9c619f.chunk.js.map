{"version":3,"sources":["data/quotes.js","App.js","serviceWorker.js","index.js"],"names":["quotes","text","attribution","sleep","ms","Promise","resolve","setTimeout","imageFetcher","fetch","then","res","url","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchImage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","state","images","includes","setState","concat","toConsumableArray","length","stop","_x","apply","arguments","_this2","react_default","createElement","className","map","quote","index","key","dist","bgImage","strength","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SACIA,EAAS,CACX,CACEC,KACE,2JAEJ,CACEA,KACE,kNAEJ,CACEA,KACE,2JAEJ,CACEA,KACE,sGAEJ,CACEA,KAAM,gCAER,CACEA,KAAM,oEAER,CACEA,KACE,mHACFC,YAAa,gCAEf,CACED,KACE,gJACFC,YAAa,gCAIbC,EAAQ,SAAAC,GAAE,OAAI,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MACvDI,EAAe,WACnB,OAAOC,MAAM,sCAAsCC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OC0BtDC,cA1Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,WAAa,WACXd,IAAeE,KAAf,eAAAa,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAAoB,SAAAC,EAAMhB,GAAN,OAAAa,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACbjB,EAAKkB,MAAMC,OAAOC,SAASvB,IAC9BG,EAAKqB,SAAS,CAAEF,OAAM,GAAAG,OAAArB,OAAAsB,EAAA,EAAAtB,CAAMD,EAAKkB,MAAMC,QAAjB,CAAyBtB,MAE7CG,EAAKkB,MAAMC,OAAOK,SAAWvC,EAAOuC,OAJtB,CAAAT,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAKV7B,EAAM,KALI,OAMhBY,EAAKO,aANW,wBAAAQ,EAAAU,SAAAZ,EAAAV,SAApB,gBAAAuB,GAAA,OAAAlB,EAAAmB,MAAAxB,KAAAyB,YAAA,KALA5B,EAAKkB,MAAQ,CACXC,OAAQ,IAHOnB,mFAmBjBG,KAAKI,8CAGE,IAAAsB,EAAA1B,KACP,OACE2B,EAAAnB,EAAAoB,cAAA,OAAKC,UAAU,OACbF,EAAAnB,EAAAoB,cAAA,OAAKC,UAAU,kBACbF,EAAAnB,EAAAoB,cAAA,OAAKC,UAAU,UAAf,8BACAF,EAAAnB,EAAAoB,cAAA,OAAKC,UAAU,QACbF,EAAAnB,EAAAoB,cAAA,WACG9C,EAAOgD,IAAI,SAACC,EAAOC,GAAR,OACVL,EAAAnB,EAAAoB,cAAA,OAAKK,IAAKD,GACRL,EAAAnB,EAAAoB,cAACM,EAAA,SAAD,CACEL,UAAW,WACXM,QAAST,EAAKX,MAAMC,OAAOgB,IAAU,GACrCI,SAAU,KAEVT,EAAAnB,EAAAoB,cAAA,OAAKC,UAAW,mBACdF,EAAAnB,EAAAoB,cAAA,KAAGC,UAAW,WAAd,IACIE,EAAMhD,KADV,IAEE4C,EAAAnB,EAAAoB,cAAA,WACAD,EAAAnB,EAAAoB,cAAA,QAAMC,UAAW,eAAjB,UACKE,EAAM/C,aD/CR,sBCoDT2C,EAAAnB,EAAAoB,cAAA,eAKRD,EAAAnB,EAAAoB,cAAA,OAAKC,UAAU,UAAf,iBApDQQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAnB,EAAAoB,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.ff9c619f.chunk.js","sourcesContent":["const defaultAttribution = 'Jesus, probably';\nlet quotes = [\n  {\n    text:\n      \"Remember two things. Number one, I said, we're going to be saying Christmas again. And, number two, I said I was going to give you a Christmas present.\"\n  },\n  {\n    text:\n      \"Let the children come to me (Unless they don't have adequate health insurance coverage). Don't stop them! For the Kingdom of Heaven belongs to those who are like these (non-pre-existing condition) children.\"\n  },\n  {\n    text:\n      \"Remember two things. Number one, I said, we're going to be saying Christmas again. And, number two, I said I was going to give you a Christmas present.\"\n  },\n  {\n    text:\n      'You go to the hospital. You have a broken arm. You come out, you are a drug addict with this crap.'\n  },\n  {\n    text: \"We're going to win at space.\"\n  },\n  {\n    text: 'That just shows when you get good ratings, you can say anything.'\n  },\n  {\n    text:\n      \"To be honest – I'll be honest, I thought it was a – I thought it was a very close to complete victory.\",\n    attribution: 'Jesus to the Devil, probably'\n  },\n  {\n    text:\n      \"He may have had a bad past. Who knows, you know? He may have had some, I think, accusations made. Didn't he have a couple things in his past?\",\n    attribution: 'Jesus about Judas, probably'\n  }\n];\n\nlet sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst imageFetcher = () => {\n  return fetch('https://source.unsplash.com/random').then(res => res.url);\n};\n\nexport { quotes, defaultAttribution, imageFetcher, sleep };\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { Parallax } from 'react-parallax';\nimport { quotes, defaultAttribution, imageFetcher, sleep } from './data/quotes';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: []\n    };\n  }\n  fetchImage = () => {\n    imageFetcher().then(async url => {\n      if (!this.state.images.includes(url)) {\n        this.setState({ images: [...this.state.images, url] });\n      }\n      if (this.state.images.length !== quotes.length) {\n        await sleep(500);\n        this.fetchImage();\n      }\n    });\n  };\n\n  componentDidMount() {\n    this.fetchImage();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"grid-container\">\n          <div className=\"header\">Things Jesus Probably Said</div>\n          <div className=\"main\">\n            <div>\n              {quotes.map((quote, index) => (\n                <div key={index}>\n                  <Parallax\n                    className={'parallax'}\n                    bgImage={this.state.images[index] || ''}\n                    strength={500}\n                  >\n                    <div className={'quote-container'}>\n                      <p className={'callout'}>\n                        \"{quote.text}\"\n                        <br />\n                        <span className={'attribution'}>\n                          – {quote.attribution || defaultAttribution}\n                        </span>\n                      </p>\n                    </div>\n                  </Parallax>\n                  <p />\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"footer\">&nbsp;</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}