{"version":3,"sources":["data/quotes.js","App.js","serviceWorker.js","index.js"],"names":["quotes","text","attribution","sleep","ms","Promise","resolve","setTimeout","categories","join","imageFetcher","fetch","concat","then","res","url","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","images","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getLocalImages","JSON","parse","localStorage","getItem","setLocalImage","setItem","stringify","toConsumableArray","fetchImage","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","state","includes","setState","stop","_x","apply","arguments","_this2","react_default","createElement","className","map","quote","index","key","dist","bgImage","strength","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8411f2f.chunk.js","sourcesContent":["const defaultAttribution = 'Jesus, probably';\nlet quotes = [\n  {\n    text:\n      \"Remember two things. Number one, I said, we're going to be saying Christmas again. And, number two, I said I was going to give you a Christmas present.\"\n  },\n  {\n    text:\n      \"Let the children come to me (Unless they don't have adequate health insurance coverage). Don't stop them! For the Kingdom of Heaven belongs to those who are like these (non-pre-existing condition) children.\"\n  },\n  {\n    text:\n      \"Remember two things. Number one, I said, we're going to be saying Christmas again. And, number two, I said I was going to give you a Christmas present.\"\n  },\n  {\n    text:\n      'You go to the hospital. You have a broken arm. You come out, you are a drug addict with this crap.'\n  },\n  {\n    text: \"We're going to win at space.\"\n  },\n  {\n    text: 'That just shows when you get good ratings, you can say anything.'\n  },\n  {\n    text:\n      \"To be honest – I'll be honest, I thought it was a – I thought it was a very close to complete victory.\",\n    attribution: 'Jesus to the Devil, probably'\n  },\n  {\n    text:\n      \"He may have had a bad past. Who knows, you know? He may have had some, I think, accusations made. Didn't he have a couple things in his past?\",\n    attribution: 'Jesus about Judas, probably'\n  },\n  {\n    text:\n      \"I am the Way, the Truth, and the Life. No one comes to the Father except through your Primary Care Physician's referral.\"\n  }\n];\n\nlet sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nlet categories = [\n  'religion',\n  'jesus',\n  'church',\n  'christianity',\n  'islam',\n  'judaism',\n  \"bahá'í faith\",\n  'rastafarianism',\n  'samaritanism',\n  'mormonism',\n  'hinduism',\n  'buddhism',\n  'jainism',\n  'sikhism',\n  'unitarian universalism',\n  'raelism',\n  'wicca',\n  'zoroastrianism',\n  'eckankar',\n  'druidry',\n  'yoruba religion',\n  'taoism',\n  'deism',\n  'atheism ',\n  'agnosticism ',\n  'ignosticism'\n].join(',');\nconst imageFetcher = () => {\n  return fetch(`https://source.unsplash.com/featured/?${categories}`).then(\n    res => res.url\n  );\n};\n\nexport { quotes, defaultAttribution, imageFetcher, sleep };\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { Parallax } from 'react-parallax';\nimport { quotes, defaultAttribution, imageFetcher, sleep } from './data/quotes';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: this.shuffle(this.getLocalImages()),\n      quotes: this.shuffle(quotes)\n    };\n  }\n  shuffle = images => {\n    // stolen from https://gomakethings.com/how-to-shuffle-an-array-with-vanilla-js/\n    let currentIndex = images.length;\n    let temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = images[currentIndex];\n      images[currentIndex] = images[randomIndex];\n      images[randomIndex] = temporaryValue;\n    }\n\n    return images;\n  };\n  getLocalImages = () => {\n    return JSON.parse(localStorage.getItem('bg-images')) || [];\n  };\n  setLocalImage = url => {\n    localStorage.setItem(\n      'bg-images',\n      JSON.stringify([...this.getLocalImages(), url])\n    );\n  };\n  fetchImage = () => {\n    imageFetcher().then(async url => {\n      if (!this.state.images.includes(url)) {\n        this.setState({ images: [...this.state.images, url] });\n        this.setLocalImage(url);\n      }\n      if (this.state.images.length !== quotes.length) {\n        await sleep(500);\n        this.fetchImage();\n      }\n    });\n  };\n\n  componentDidMount() {\n    if (this.state.images.length !== quotes.length) {\n      this.fetchImage();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"grid-container\">\n          <div className=\"header\">Things Jesus Probably Said</div>\n          <div className=\"main\">\n            <div>\n              {this.state.quotes.map((quote, index) => (\n                <div key={index}>\n                  <Parallax\n                    className={'parallax'}\n                    bgImage={this.state.images[index] || ''}\n                    strength={500}\n                  >\n                    <div className={'quote-container'}>\n                      <p className={'callout'}>\n                        \"{quote.text}\"\n                        <br />\n                        <span className={'attribution'}>\n                          – {quote.attribution || defaultAttribution}\n                        </span>\n                      </p>\n                    </div>\n                  </Parallax>\n                  <p />\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"footer\">&nbsp;</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}